{часовые срезы}
/*ReportName="ЭКОМ Баланс по электроэнергии за прошедший час" (срезы на конец часа)*/
/*Mode=часовые-1*/
/*DownQuery="суточные срезы"*/
/*UpQuery="суточные срезы"*/

SET QUOTED_IDENTIFIER OFF
SELECT
	DateAdd(mi, -5, DateTime) as "Дата",
	null,
	round(input, 6) as "Поступило на шины, МВт",
	null,
	round(output, 6) as "Расход эл/эн по станции, МВт",
	round(send, 6) as "Отпуск эл/эн потребителям, МВт",
	round(loss_T2, 6) as "Потери Т2, MВт",
	round(loss_T3, 6) as "Потери Т3, MВт",
	round(loss_reactors, 6) as "Потери в реакторах, MВт",
	round(loss_GDK2, 6) as "Потери в ГДК-2, MВт",
	null,
	round(input - output - send - loss_T2 - loss_T3 - loss_reactors - loss_GDK2, 6) as "Факт. небал, МВт",
	CASE WHEN input = 0 OR input IS NULL THEN 0 ELSE round((input - output - send - loss_T2 - loss_T3 - loss_reactors - loss_GDK2) / input * 100, 6) END as "Факт. небал, %",
	null,
	round(cosFi_T2, 3) as "cosɸ Т-2",
	round(cosFi_T3, 3) as "cosɸ Т-3"
FROM (
	SELECT *,
		CASE WHEN cosFi_T2 = 0 THEN 0 ELSE (28.44 + 171.33 * power((L03_EB10P000_H1 + L03_EB20P000_H1) / (40000 * cosFi_T2), 2)) / 1000 END as "loss_T2",
		CASE WHEN cosFi_T3 = 0 THEN 0 ELSE (28.44 + 180.5 * power((L12_EB10P000_H1 + L12_EB20P000_H1) / (40000 * cosFi_T3), 2)) / 1000 END as "loss_T3"
	FROM (
		SELECT *,
			((L01_EB10P000_H1 + L02_EB10P000_H1) + (L05_EB20P000_H1 + L06_EB20P000_H1 + L13_EB20P000_H1 + L14_EB20P000_H1 + L15_EB20P000_H1 + L16_EB20P000_H1 + L17_EB20P000_H1 + L32_EB20P000_H1)) / 1000 as "input",
			(L20_EB10P000_H1 + L21_EB10P000_H1 + L22_EB10P000_H1 + L23_EB10P000_H1 + L07_EB10P000_H1 + L08_EB10P000_H1 + L09_EB10P000_H1 + L67_EB10P000_H1) / 1000 as "output",
			(L24_EB10P000_H1 + L25_EB10P000_H1 + L26_EB10P000_H1 + L27_EB10P000_H1 + L28_EB10P000_H1 + L29_EB10P000_H1 + L30_EB10P000_H1 + L31_EB10P000_H1 + L32_EB10P000_H1 + L33_EB10P000_H1 + L34_EB10P000_H1 + L35_EB10P000_H1 + L36_EB10P000_H1 + L37_EB10P000_H1 + L40_EB10P000_H1 + L57_EB10P000_H1 + L41_EB10P000_H1 + L42_EB10P000_H1 + L43_EB10P000_H1 + L44_EB10P000_H1 + L45_EB10P000_H1 + L46_EB10P000_H1 + L47_EB10P000_H1 + L48_EB10P000_H1 + L49_EB10P000_H1 + L50_EB10P000_H1 + L51_EB10P000_H1 + L52_EB10P000_H1 + L53_EB10P000_H1 + L54_EB10P000_H1 + L55_EB10P000_H1 + L56_EB10P000_H1 + L59_EB10P000_H1 + L60_EB10P000_H1 + L61_EB10P000_H1 + L62_EB10P000_H1 + L63_EB10P000_H1 + L64_EB10P000_H1 + L65_EB10P000_H1 + L66_EB10P000_H1 + L05_EB10P000_H1 + L06_EB10P000_H1 + L13_EB10P000_H1 + L14_EB10P000_H1 + L15_EB10P000_H1 + L16_EB10P000_H1 + L17_EB10P000_H1) / 1000 as "send",
			CASE WHEN (L03_EB10P000_H1 + L03_EB20P000_H1 = 0 AND L03_EB10Q000_H1 + L03_EB20Q000_H1 = 0) THEN 0 ELSE (L03_EB10P000_H1 + L03_EB20P000_H1) / sqrt(power(L03_EB10P000_H1 + L03_EB20P000_H1, 2) + power(L03_EB10Q000_H1 + L03_EB20Q000_H1, 2)) END as "cosFi_T2",
			CASE WHEN (L12_EB10P000_H1 + L12_EB20P000_H1 = 0 AND L12_EB10Q000_H1 + L12_EB20Q000_H1 = 0) THEN 0 ELSE (L12_EB10P000_H1 + L12_EB20P000_H1) / sqrt(power(L12_EB10P000_H1 + L12_EB20P000_H1, 2) + power(L12_EB10Q000_H1 + L12_EB20Q000_H1, 2)) END as "cosFi_T3",
			(L07_EB10P000_H1 + L08_EB10P000_H1 + L24_EB10P000_H1 + L25_EB10P000_H1 + L26_EB10P000_H1 + L27_EB10P000_H1 + L28_EB10P000_H1 + L29_EB10P000_H1 + L30_EB10P000_H1 + L31_EB10P000_H1 + L32_EB10P000_H1 + L33_EB10P000_H1 + L34_EB10P000_H1 + L35_EB10P000_H1 + L36_EB10P000_H1 + L37_EB10P000_H1 + L40_EB10P000_H1 + L41_EB10P000_H1 + L42_EB10P000_H1 + L43_EB10P000_H1 + L44_EB10P000_H1 + L45_EB10P000_H1 + L46_EB10P000_H1 + L47_EB10P000_H1 + L48_EB10P000_H1 + L49_EB10P000_H1 + L50_EB10P000_H1 + L51_EB10P000_H1 + L52_EB10P000_H1 + L53_EB10P000_H1 + L54_EB10P000_H1 + L55_EB10P000_H1 + L56_EB10P000_H1 + L57_EB10P000_H1 + L59_EB10P000_H1 + L60_EB10P000_H1 + L61_EB10P000_H1 + L62_EB10P000_H1 + L63_EB10P000_H1 + L64_EB10P000_H1 + L65_EB10P000_H1 + L66_EB10P000_H1) * 0.004 / 1000 as "loss_reactors",
			L58_EB10P000_H1 / 1000 as "loss_GDK2"
		FROM OpenQuery(INSQL,
		"SELECT DateTime,
		L01_EB10P000_H1,
		L01_EB20P000_H1,
		L02_EB10P000_H1,
		L02_EB20P000_H1,
		L03_EB10P000_H1,
		L03_EB20P000_H1,
		L04_EB10P000_H1,
		L04_EB20P000_H1,
		L05_EB10P000_H1,
		L05_EB20P000_H1,
		L06_EB10P000_H1,
		L06_EB20P000_H1,
		L07_EB10P000_H1,
		L07_EB20P000_H1,
		L08_EB10P000_H1,
		L08_EB20P000_H1,
		L09_EB10P000_H1,
		L09_EB20P000_H1,
		L10_EB10P000_H1,
		L10_EB20P000_H1,
		L11_EB10P000_H1,
		L11_EB20P000_H1,
		L12_EB10P000_H1,
		L12_EB20P000_H1,
		L13_EB10P000_H1,
		L13_EB20P000_H1,
		L14_EB10P000_H1,
		L14_EB20P000_H1,
		L15_EB10P000_H1,
		L15_EB20P000_H1,
		L16_EB10P000_H1,
		L16_EB20P000_H1,
		L17_EB10P000_H1,
		L17_EB20P000_H1,
		L18_EB10P000_H1,
		L18_EB20P000_H1,
		L19_EB10P000_H1,
		L19_EB20P000_H1,
		L20_EB10P000_H1,
		L20_EB20P000_H1,
		L21_EB10P000_H1,
		L21_EB20P000_H1,
		L22_EB10P000_H1,
		L22_EB20P000_H1,
		L23_EB10P000_H1,
		L23_EB20P000_H1,
		L24_EB10P000_H1,
		L24_EB20P000_H1,
		L25_EB10P000_H1,
		L25_EB20P000_H1,
		L26_EB10P000_H1,
		L26_EB20P000_H1,
		L27_EB10P000_H1,
		L27_EB20P000_H1,
		L28_EB10P000_H1,
		L28_EB20P000_H1,
		L29_EB10P000_H1,
		L29_EB20P000_H1,
		L30_EB10P000_H1,
		L30_EB20P000_H1,
		L31_EB10P000_H1,
		L31_EB20P000_H1,
		L32_EB10P000_H1,
		L32_EB20P000_H1,
		L33_EB10P000_H1,
		L33_EB20P000_H1,
		L34_EB10P000_H1,
		L34_EB20P000_H1,
		L35_EB10P000_H1,
		L35_EB20P000_H1,
		L36_EB10P000_H1,
		L36_EB20P000_H1,
		L37_EB10P000_H1,
		L37_EB20P000_H1,
		L38_EB10P000_H1,
		L38_EB20P000_H1,
		L39_EB10P000_H1,
		L39_EB20P000_H1,
		L40_EB10P000_H1,
		L40_EB20P000_H1,
		L41_EB10P000_H1,
		L41_EB20P000_H1,
		L42_EB10P000_H1,
		L42_EB20P000_H1,
		L43_EB10P000_H1,
		L43_EB20P000_H1,
		L44_EB10P000_H1,
		L44_EB20P000_H1,
		L45_EB10P000_H1,
		L45_EB20P000_H1,
		L46_EB10P000_H1,
		L46_EB20P000_H1,
		L47_EB10P000_H1,
		L47_EB20P000_H1,
		L48_EB10P000_H1,
		L48_EB20P000_H1,
		L49_EB10P000_H1,
		L49_EB20P000_H1,
		L50_EB10P000_H1,
		L50_EB20P000_H1,
		L51_EB10P000_H1,
		L51_EB20P000_H1,
		L52_EB10P000_H1,
		L52_EB20P000_H1,
		L53_EB10P000_H1,
		L53_EB20P000_H1,
		L54_EB10P000_H1,
		L54_EB20P000_H1,
		L55_EB10P000_H1,
		L55_EB20P000_H1,
		L56_EB10P000_H1,
		L56_EB20P000_H1,
		L57_EB10P000_H1,
		L57_EB20P000_H1,
		L58_EB10P000_H1,
		L58_EB20P000_H1,
		L59_EB10P000_H1,
		L59_EB20P000_H1,
		L60_EB10P000_H1,
		L60_EB20P000_H1,
		L61_EB10P000_H1,
		L61_EB20P000_H1,
		L62_EB10P000_H1,
		L62_EB20P000_H1,
		L63_EB10P000_H1,
		L63_EB20P000_H1,
		L64_EB10P000_H1,
		L64_EB20P000_H1,
		L65_EB10P000_H1,
		L65_EB20P000_H1,
		L66_EB10P000_H1,
		L66_EB20P000_H1,
		L67_EB10P000_H1,
		L67_EB20P000_H1,
		L03_EB10Q000_H1,
		L12_EB10Q000_H1,
		L03_EB20Q000_H1,
		L12_EB20Q000_H1
		FROM Runtime.dbo.AnalogWideHistory
		WHERE wwVersion = 'Latest'
		AND wwRetrievalMode = 'Cyclic'
		AND wwResolution = @resolution
		AND DateTime >= @start
		AND DateTime <= @finish")
	) AS T1
) AS T2

{суточные срезы}
/*ReportName="ЭКОМ-3000.Баланс суточный по электроэнергии" (срезы на конец суток)*/
/*Mode=суточные-1*/
/*DownQuery="часовые срезы"*/
/*UpQuery="часовые срезы"*/

SET QUOTED_IDENTIFIER OFF
SELECT
	DateAdd(mi, -1445, DateTime) as "Дата",
	null,
	round(input, 6) as "Поступило на шины, МВт",
	null,
	round(output, 6) as "Расход эл/эн по станции, МВт",
	round(send, 6) as "Отпуск эл/эн потребителям, МВт",
	round(loss_T2, 6) as "Потери Т2, MВт",
	round(loss_T3, 6) as "Потери Т3, MВт",
	round(loss_reactors, 6) as "Потери в реакторах, MВт",
	round(loss_GDK2, 6) as "Потери в ГДК-2, MВт",
	null,
	round(input - output - send - loss_T2 - loss_T3 - loss_reactors - loss_GDK2, 6) as "Факт. небал, МВт",
	CASE WHEN input = 0 OR input IS NULL THEN 0 ELSE round((input - output - send - loss_T2 - loss_T3 - loss_reactors - loss_GDK2) / input * 100, 6) END as "Факт. небал, %",
	null,
	round(cosFi_T2, 3) as "cosɸ Т-2",
	round(cosFi_T3, 3) as "cosɸ Т-3"
FROM (
	SELECT *,
		CASE WHEN cosFi_T2 = 0 THEN 0 ELSE (28.44 + 171.33 * 24 * power((L03_EB10P000_S1 + L03_EB20P000_S1) / (40000 * 24 * cosFi_T2), 2)) / 1000 END as "loss_T2",
		CASE WHEN cosFi_T3 = 0 THEN 0 ELSE (28.44 + 180.5 * 24 * power((L12_EB10P000_S1 + L12_EB20P000_S1) / (40000 * 24 * cosFi_T3), 2)) / 1000 END as "loss_T3"
	FROM (
		SELECT *,
			((L01_EB10P000_S1 + L02_EB10P000_S1) + (L05_EB20P000_S1 + L06_EB20P000_S1 + L13_EB20P000_S1 + L14_EB20P000_S1 + L15_EB20P000_S1 + L16_EB20P000_S1 + L17_EB20P000_S1 + L32_EB20P000_S1)) / 1000 as "input",
			(L20_EB10P000_S1 + L21_EB10P000_S1 + L22_EB10P000_S1 + L23_EB10P000_S1 + L07_EB10P000_S1 + L08_EB10P000_S1 + L09_EB10P000_S1 + L67_EB10P000_S1) / 1000 as "output",
			(L24_EB10P000_S1 + L25_EB10P000_S1 + L26_EB10P000_S1 + L27_EB10P000_S1 + L28_EB10P000_S1 + L29_EB10P000_S1 + L30_EB10P000_S1 + L31_EB10P000_S1 + L32_EB10P000_S1 + L33_EB10P000_S1 + L34_EB10P000_S1 + L35_EB10P000_S1 + L36_EB10P000_S1 + L37_EB10P000_S1 + L40_EB10P000_S1 + L57_EB10P000_S1 + L41_EB10P000_S1 + L42_EB10P000_S1 + L43_EB10P000_S1 + L44_EB10P000_S1 + L45_EB10P000_S1 + L46_EB10P000_S1 + L47_EB10P000_S1 + L48_EB10P000_S1 + L49_EB10P000_S1 + L50_EB10P000_S1 + L51_EB10P000_S1 + L52_EB10P000_S1 + L53_EB10P000_S1 + L54_EB10P000_S1 + L55_EB10P000_S1 + L56_EB10P000_S1 + L59_EB10P000_S1 + L60_EB10P000_S1 + L61_EB10P000_S1 + L62_EB10P000_S1 + L63_EB10P000_S1 + L64_EB10P000_S1 + L65_EB10P000_S1 + L66_EB10P000_S1 + L05_EB10P000_S1 + L06_EB10P000_S1 + L13_EB10P000_S1 + L14_EB10P000_S1 + L15_EB10P000_S1 + L16_EB10P000_S1 + L17_EB10P000_S1) / 1000 as "send",
			CASE WHEN (L03_EB10P000_S1 + L03_EB20P000_S1 = 0 AND L03_EB10Q000_S1 + L03_EB20Q000_S1 = 0) THEN 0 ELSE (L03_EB10P000_S1 + L03_EB20P000_S1) / sqrt(power(L03_EB10P000_S1 + L03_EB20P000_S1, 2) + power(L03_EB10Q000_S1 + L03_EB20Q000_S1, 2)) END as "cosFi_T2",
			CASE WHEN (L12_EB10P000_S1 + L12_EB20P000_S1 = 0 AND L12_EB10Q000_S1 + L12_EB20Q000_S1 = 0) THEN 0 ELSE (L12_EB10P000_S1 + L12_EB20P000_S1) / sqrt(power(L12_EB10P000_S1 + L12_EB20P000_S1, 2) + power(L12_EB10Q000_S1 + L12_EB20Q000_S1, 2)) END as "cosFi_T3",
			(L07_EB10P000_S1 + L08_EB10P000_S1 + L24_EB10P000_S1 + L25_EB10P000_S1 + L26_EB10P000_S1 + L27_EB10P000_S1 + L28_EB10P000_S1 + L29_EB10P000_S1 + L30_EB10P000_S1 + L31_EB10P000_S1 + L32_EB10P000_S1 + L33_EB10P000_S1 + L34_EB10P000_S1 + L35_EB10P000_S1 + L36_EB10P000_S1 + L37_EB10P000_S1 + L40_EB10P000_S1 + L41_EB10P000_S1 + L42_EB10P000_S1 + L43_EB10P000_S1 + L44_EB10P000_S1 + L45_EB10P000_S1 + L46_EB10P000_S1 + L47_EB10P000_S1 + L48_EB10P000_S1 + L49_EB10P000_S1 + L50_EB10P000_S1 + L51_EB10P000_S1 + L52_EB10P000_S1 + L53_EB10P000_S1 + L54_EB10P000_S1 + L55_EB10P000_S1 + L56_EB10P000_S1 + L57_EB10P000_S1 + L59_EB10P000_S1 + L60_EB10P000_S1 + L61_EB10P000_S1 + L62_EB10P000_S1 + L63_EB10P000_S1 + L64_EB10P000_S1 + L65_EB10P000_S1 + L66_EB10P000_S1) * 0.004 / 1000 as "loss_reactors",
			L58_EB10P000_S1 / 1000 as "loss_GDK2"
		FROM OpenQuery(INSQL,
		"SELECT DateTime,
		L01_EB10P000_S1,
		L01_EB20P000_S1,
		L02_EB10P000_S1,
		L02_EB20P000_S1,
		L03_EB10P000_S1,
		L03_EB20P000_S1,
		L04_EB10P000_S1,
		L04_EB20P000_S1,
		L05_EB10P000_S1,
		L05_EB20P000_S1,
		L06_EB10P000_S1,
		L06_EB20P000_S1,
		L07_EB10P000_S1,
		L07_EB20P000_S1,
		L08_EB10P000_S1,
		L08_EB20P000_S1,
		L09_EB10P000_S1,
		L09_EB20P000_S1,
		L10_EB10P000_S1,
		L10_EB20P000_S1,
		L11_EB10P000_S1,
		L11_EB20P000_S1,
		L12_EB10P000_S1,
		L12_EB20P000_S1,
		L13_EB10P000_S1,
		L13_EB20P000_S1,
		L14_EB10P000_S1,
		L14_EB20P000_S1,
		L15_EB10P000_S1,
		L15_EB20P000_S1,
		L16_EB10P000_S1,
		L16_EB20P000_S1,
		L17_EB10P000_S1,
		L17_EB20P000_S1,
		L18_EB10P000_S1,
		L18_EB20P000_S1,
		L19_EB10P000_S1,
		L19_EB20P000_S1,
		L20_EB10P000_S1,
		L20_EB20P000_S1,
		L21_EB10P000_S1,
		L21_EB20P000_S1,
		L22_EB10P000_S1,
		L22_EB20P000_S1,
		L23_EB10P000_S1,
		L23_EB20P000_S1,
		L24_EB10P000_S1,
		L24_EB20P000_S1,
		L25_EB10P000_S1,
		L25_EB20P000_S1,
		L26_EB10P000_S1,
		L26_EB20P000_S1,
		L27_EB10P000_S1,
		L27_EB20P000_S1,
		L28_EB10P000_S1,
		L28_EB20P000_S1,
		L29_EB10P000_S1,
		L29_EB20P000_S1,
		L30_EB10P000_S1,
		L30_EB20P000_S1,
		L31_EB10P000_S1,
		L31_EB20P000_S1,
		L32_EB10P000_S1,
		L32_EB20P000_S1,
		L33_EB10P000_S1,
		L33_EB20P000_S1,
		L34_EB10P000_S1,
		L34_EB20P000_S1,
		L35_EB10P000_S1,
		L35_EB20P000_S1,
		L36_EB10P000_S1,
		L36_EB20P000_S1,
		L37_EB10P000_S1,
		L37_EB20P000_S1,
		L38_EB10P000_S1,
		L38_EB20P000_S1,
		L39_EB10P000_S1,
		L39_EB20P000_S1,
		L40_EB10P000_S1,
		L40_EB20P000_S1,
		L41_EB10P000_S1,
		L41_EB20P000_S1,
		L42_EB10P000_S1,
		L42_EB20P000_S1,
		L43_EB10P000_S1,
		L43_EB20P000_S1,
		L44_EB10P000_S1,
		L44_EB20P000_S1,
		L45_EB10P000_S1,
		L45_EB20P000_S1,
		L46_EB10P000_S1,
		L46_EB20P000_S1,
		L47_EB10P000_S1,
		L47_EB20P000_S1,
		L48_EB10P000_S1,
		L48_EB20P000_S1,
		L49_EB10P000_S1,
		L49_EB20P000_S1,
		L50_EB10P000_S1,
		L50_EB20P000_S1,
		L51_EB10P000_S1,
		L51_EB20P000_S1,
		L52_EB10P000_S1,
		L52_EB20P000_S1,
		L53_EB10P000_S1,
		L53_EB20P000_S1,
		L54_EB10P000_S1,
		L54_EB20P000_S1,
		L55_EB10P000_S1,
		L55_EB20P000_S1,
		L56_EB10P000_S1,
		L56_EB20P000_S1,
		L57_EB10P000_S1,
		L57_EB20P000_S1,
		L58_EB10P000_S1,
		L58_EB20P000_S1,
		L59_EB10P000_S1,
		L59_EB20P000_S1,
		L60_EB10P000_S1,
		L60_EB20P000_S1,
		L61_EB10P000_S1,
		L61_EB20P000_S1,
		L62_EB10P000_S1,
		L62_EB20P000_S1,
		L63_EB10P000_S1,
		L63_EB20P000_S1,
		L64_EB10P000_S1,
		L64_EB20P000_S1,
		L65_EB10P000_S1,
		L65_EB20P000_S1,
		L66_EB10P000_S1,
		L66_EB20P000_S1,
		L67_EB10P000_S1,
		L67_EB20P000_S1 ,
		L03_EB10Q000_S1,
		L12_EB10Q000_S1,
		L03_EB20Q000_S1,
		L12_EB20Q000_S1
		FROM Runtime.dbo.AnalogWideHistory
		WHERE wwVersion = 'Latest'
		AND wwRetrievalMode = 'Cyclic'
		AND wwResolution = @resolution
		AND DateTime >= @start
		AND DateTime <= @finish")
	) AS T1
) AS T2